// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
    id            String        @id @default(cuid())
    name          String
    email         String        @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    rooms      Room[]
    participants  Participant[]
}

model VerificationToken {
    identifier String   @id @default(cuid())
    token      String   @unique
    expires    DateTime
    email      String

    @@unique([identifier, token, email])
}

model Room {
    id           String        @id @default(cuid())
    hostId       String
    user         User          @relation(fields: [hostId], references: [id])
    metadata     String?       @db.Text
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    participants Participant[]
    recordings   Recording[]

    @@index([hostId])
}

model Participant {
    userId    String
    user      User    @relation(fields: [userId], references: [id])
    roomId String
    Room   Room @relation(fields: [roomId], references: [id])
    isActive Boolean @default(false)

    @@id([userId, roomId])
    @@unique([userId, roomId])
    @@index([roomId])
    @@index([userId])
}

model Recording {
    id        String  @id @default(cuid())
    roomId String
    Room   Room @relation(fields: [roomId], references: [id])
}
